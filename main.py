import os
import re
import asyncio
from collections import defaultdict
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

load_dotenv()
API_TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_tasks: defaultdict[int, list[tuple[str, datetime]]] = defaultdict(list)

def parse_event_and_time(text):
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
    - "–≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:30"
    - "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞" 
    - "—Å–æ–±—Ä–∞–Ω–∏–µ 25.12.2025 14:00"
    - "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 14:30"
    """
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    patterns = [
        # –§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú
        (r'(\d{1,2}):(\d{2})', 'time_only'),
        # –§–æ—Ä–º–∞—Ç: —á–µ—Ä–µ–∑ X —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç
        (r'—á–µ—Ä–µ–∑\s+(\d+)\s+(—á–∞—Å[–∞-—è]*|–º–∏–Ω—É—Ç[–∞-—è]*)', 'relative_time'),
        # –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
        (r'(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})', 'full_datetime'),
        # –§–æ—Ä–º–∞—Ç: –∑–∞–≤—Ç—Ä–∞ –≤ –ß–ß:–ú–ú
        (r'–∑–∞–≤—Ç—Ä–∞\s+–≤\s+(\d{1,2}):(\d{2})', 'tomorrow'),
        # –§–æ—Ä–º–∞—Ç: —Å–µ–≥–æ–¥–Ω—è –≤ –ß–ß:–ú–ú
        (r'—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+(\d{1,2}):(\d{2})', 'today'),
    ]
    
    event_text = text.strip()
    target_datetime = None
    
    for pattern, pattern_type in patterns:
        match = re.search(pattern, text.lower())
        if match:
            try:
                if pattern_type == 'time_only':
                    # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    hour, minute = map(int, match.groups())
                    now = datetime.now()
                    target_datetime = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
                    
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                    if target_datetime <= now:
                        target_datetime += timedelta(days=1)
                        
                elif pattern_type == 'relative_time':
                    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                    amount = int(match.group(1))
                    unit = match.group(2).lower()
                    
                    if '—á–∞—Å' in unit:
                        target_datetime = datetime.now() + timedelta(hours=amount)
                    elif '–º–∏–Ω—É—Ç' in unit:
                        target_datetime = datetime.now() + timedelta(minutes=amount)
                        
                elif pattern_type == 'full_datetime':
                    # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                    day, month, year, hour, minute = map(int, match.groups())
                    target_datetime = datetime(year, month, day, hour, minute)
                    
                elif pattern_type == 'tomorrow':
                    # –ó–∞–≤—Ç—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                    hour, minute = map(int, match.groups())
                    tomorrow = datetime.now() + timedelta(days=1)
                    target_datetime = tomorrow.replace(hour=hour, minute=minute, second=0, microsecond=0)
                    
                elif pattern_type == 'today':
                    # –°–µ–≥–æ–¥–Ω—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                    hour, minute = map(int, match.groups())
                    today = datetime.now()
                    target_datetime = today.replace(hour=hour, minute=minute, second=0, microsecond=0)
                    
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                    if target_datetime <= today:
                        target_datetime += timedelta(days=1)
                
                # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è
                event_text = re.sub(pattern, '', text, flags=re.IGNORECASE).strip()
                break
                
            except ValueError:
                continue
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è
    cleanup_words = ['–∑–∞–≤—Ç—Ä–∞', '—Å–µ–≥–æ–¥–Ω—è', '—á–µ—Ä–µ–∑', '–≤', '–Ω–∞', '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤', '–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç–∞']
    for word in cleanup_words:
        event_text = re.sub(rf'\b{word}\b', '', event_text, flags=re.IGNORECASE)
    
    event_text = ' '.join(event_text.split())
    
    return event_text, target_datetime

async def send_notification(chat_id: int, event_text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n{event_text}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è üìÖ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/task - —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º\n"
        "/mytasks - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!"
    )

@dp.message(Command("task"))
async def calendar_handler(message: Message):
    await message.answer(
        "üìù –ù–∞–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ –∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:30\n"
        "‚Ä¢ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
        "‚Ä¢ —Å–æ–±—Ä–∞–Ω–∏–µ 25.12.2025 14:00\n"
        "‚Ä¢ –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã 18:00\n"
        "‚Ä¢ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è –≤ 19:00"
    )

@dp.message(Command("mytasks"))
async def show_tasks_handler(message: Message):
    user_id = message.from_user.id
    
    if not user_tasks[user_id]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    
    tasks_text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
    for i, task_info in enumerate(user_tasks[user_id], 1):
        event_text, scheduled_time = task_info
        time_str = scheduled_time.strftime("%d.%m.%Y %H:%M")
        tasks_text += f"{i}. {event_text}\n   ‚è± {time_str}\n\n"
    
    await message.answer(tasks_text)

@dp.message(F.text)
async def handle_event_text(message: Message):
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏–µ –∏ –≤—Ä–µ–º—è
        event_text, target_datetime = parse_event_and_time(message.text)
        
        if target_datetime is None:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:30\n"
                "‚Ä¢ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
                "‚Ä¢ —Å–æ–±—Ä–∞–Ω–∏–µ 25.12.2025 14:00\n"
                "‚Ä¢ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 18:00"
            )
            return
        
        if target_datetime <= datetime.now():
            await message.answer("‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º")
            return
        
        if not event_text:
            event_text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        job_id = f"user_{user_id}_task_{len(user_tasks[user_id])}"
        
        scheduler.add_job(
            send_notification,
            trigger=DateTrigger(run_date=target_datetime),
            args=[message.chat.id, event_text],
            id=job_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        user_tasks[user_id].append((event_text, target_datetime))
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        time_str = target_datetime.strftime("%d.%m.%Y %H:%M")
        await message.answer(
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìù –°–æ–±—ã—Ç–∏–µ: {event_text}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_str}\n\n"
            f"–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
        )
        
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è")
        print(f"–û—à–∏–±–∫–∞: {e}")

async def main():
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    try:
        await dp.start_polling(bot)
    finally:
        scheduler.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
