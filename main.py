import os
import re
import json
import asyncio
import uuid
from collections import defaultdict
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.enums import ChatAction
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
import requests
from typing import Union, Dict, Any, List, Tuple, Optional
import logging
from difflib import SequenceMatcher

# SQLAlchemy imports
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Boolean, ForeignKey, Text
from sqlalchemy.orm import sessionmaker, relationship, Session, declarative_base
from sqlalchemy.sql import text
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
API_TOKEN = os.getenv('BOT_TOKEN')
GIGACHAT_KEY = os.getenv("GIGACHAT_AUTHORIZATION_KEY")
assert API_TOKEN is not None
assert GIGACHAT_KEY is not None

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# SQLAlchemy setup
DATABASE_URL = "sqlite:///calendar_bot.db"
engine = create_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ Gigachat
gigachat_token = None
token_expires_at = None

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
pending_tasks: defaultdict[int, dict] = defaultdict(dict)

# –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö
NOTIFICATION_OPTIONS = {
    "5min": {"text": "üîî –ó–∞ 5 –º–∏–Ω—É—Ç", "minutes": 5, "emoji": "‚ö°"},
    "15min": {"text": "üîî –ó–∞ 15 –º–∏–Ω—É—Ç", "minutes": 15, "emoji": "‚è∞"},
    "30min": {"text": "üîî –ó–∞ 30 –º–∏–Ω—É—Ç", "minutes": 30, "emoji": "‚è≤Ô∏è"},
    "1hour": {"text": "üîî –ó–∞ 1 —á–∞—Å", "minutes": 60, "emoji": "üïê"},
    "2hour": {"text": "üîî –ó–∞ 2 —á–∞—Å–∞", "minutes": 120, "emoji": "üïë"},
    "1day": {"text": "üîî –ó–∞ 1 –¥–µ–Ω—å", "minutes": 1440, "emoji": "üìÖ"},
    "no_notification": {"text": "üîï –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "minutes": 0, "emoji": "üîá"}
}

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class Event(Base):
    __tablename__ = "events"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, nullable=False, index=True)
    description = Column(Text, nullable=False)
    scheduled_at = Column(DateTime, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    notifications = relationship("Notification", back_populates="event", cascade="all, delete-orphan")

class Notification(Base):
    __tablename__ = "notifications"
    
    id = Column(Integer, primary_key=True, index=True)
    event_id = Column(Integer, ForeignKey("events.id"), nullable=False)
    notification_minutes = Column(Integer, nullable=False)
    is_sent = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    event = relationship("Event", back_populates="notifications")

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    Base.metadata.create_all(bind=engine)

def get_db() -> Session:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return SessionLocal()

def get_gigachat_token() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ Gigachat"""
    global gigachat_token, token_expires_at
    
    if gigachat_token and token_expires_at and datetime.now() < token_expires_at:
        return gigachat_token
    
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": str(uuid.uuid4()),
        "Authorization": f"Basic {GIGACHAT_KEY}"
    }
    
    data = {
        "scope": "GIGACHAT_API_PERS"
    }
    
    try:
        response = requests.post(url, headers=headers, data=data, verify=False)
        
        if response.status_code == 200:
            token_data = response.json()
            gigachat_token = token_data["access_token"]
            expires_in = int(token_data.get("expires_in", 1800))
            token_expires_at = datetime.now() + timedelta(seconds=expires_in - 60)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω Gigachat, –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {token_expires_at}")
            return gigachat_token
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Gigachat: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ Gigachat: {e}")
        return None

def gigachat_reply(prompt: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ì–∏–≥–∞—á–∞—Ç"""
    token = get_gigachat_token()
    if not token:
        return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Gigachat"
    
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
    }
    data = {
        "model": "GigaChat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.3
    }
    
    try:
        resp = requests.post(url, headers=headers, json=data, verify=False)
        if resp.status_code == 200:
            return resp.json()["choices"][0]["message"]["content"]
        else:
            logger.error(f"Gigachat API error: {resp.status_code} - {resp.text}")
            return f"‚ö† –û—à–∏–±–∫–∞ Gigachat: {resp.text}"
    except Exception as e:
        logger.error(f"Gigachat connection error: {e}")
        return f"‚ö† Gigachat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"

def parse_message_with_ai(msg: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON —á–µ—Ä–µ–∑ Gigachat"""
    current_datetime = datetime.now()
    current_date_str = current_datetime.strftime("%Y-%m-%d")
    current_time_str = current_datetime.strftime("%H:%M")
    tomorrow_str = (current_datetime + timedelta(days=1)).strftime('%Y-%m-%d')
    
    json_prompt = f"""[–ö–û–ù–¢–ï–ö–°–¢] –°–µ–≥–æ–¥–Ω—è {current_date_str}, –≤—Ä–µ–º—è {current_time_str}

[–ó–ê–î–ê–ß–ê] –ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON —Å –ø–æ–ª—è–º–∏:
- command: –æ–¥–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ
- event: –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–º –¥–ª—è –ø–æ–∏—Å–∫–∞)
- datetime: YYYY-MM-DDTHH:MM (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è)
- new_datetime: YYYY-MM-DDTHH:MM (–¥–ª—è –∫–æ–º–∞–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏)
- new_event: –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã change_description)

[–ö–û–ú–ê–ù–î–´]:
- "create" - —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
- "delete" - —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ  
- "change_time" - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
- "change_date" - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
- "change_description" - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
- "change_full" - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (–≤—Ä–µ–º—è + –æ–ø–∏—Å–∞–Ω–∏–µ)
- "list" - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è

[–ü–†–ê–í–ò–õ–ê]:
1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ —Ç–µ–∫—Å—Ç–∞!
2. –ï—Å–ª–∏ "–∑–∞–≤—Ç—Ä–∞" = {tomorrow_str}, "—Å–µ–≥–æ–¥–Ω—è" = {current_date_str}
3. –í—Ä–µ–º—è –±–µ–∑ –º–∏–Ω—É—Ç (15) = 15:00
4. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π 2025+ –≥–æ–¥—ã
5. –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

[–ü–†–ò–ú–ï–†–´]:
–í–≤–æ–¥: "–°–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:30"
–û—Ç–≤–µ—Ç: {{"command": "create", "event": "–í—Å—Ç—Ä–µ—á–∞", "datetime": "{tomorrow_str}T15:30"}}

–í–≤–æ–¥: "–ò–∑–º–µ–Ω–∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ 16:00"  
–û—Ç–≤–µ—Ç: {{"command": "change_time", "event": "–≤—Å—Ç—Ä–µ—á–∞", "new_datetime": "{current_date_str}T16:00"}}

–í–≤–æ–¥: "–ü–µ—Ä–µ–Ω–µ—Å–∏ –≤—Å—Ç—Ä–µ—á—É —Å –≤—Ä–∞—á–æ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞ 14:00"
–û—Ç–≤–µ—Ç: {{"command": "change_time", "event": "–≤—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º", "new_datetime": "{tomorrow_str}T14:00"}}

–í–≤–æ–¥: "–£–¥–∞–ª–∏ –ø–æ–∫—É–ø–∫–∏"
–û—Ç–≤–µ—Ç: {{"command": "delete", "event": "–ø–æ–∫—É–ø–∫–∏"}}

–í–≤–æ–¥: "–ü–µ—Ä–µ–∏–º–µ–Ω—É–π –≤—Å—Ç—Ä–µ—á—É –≤ —Å–æ–±—Ä–∞–Ω–∏–µ"
–û—Ç–≤–µ—Ç: {{"command": "change_description", "event": "–≤—Å—Ç—Ä–µ—á–∞", "new_event": "—Å–æ–±—Ä–∞–Ω–∏–µ"}}

–°–æ–æ–±—â–µ–Ω–∏–µ: {msg}"""
    
    return gigachat_reply(json_prompt)

def parse_time_input(text: str) -> tuple[str, str] | None:
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ –¥–∞—Ç—ã"""
    text = text.strip().lower()
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú
    time_match = re.match(r'^(\d{1,2}):(\d{2})$', text)
    if time_match:
        hour, minute = time_match.groups()
        hour, minute = int(hour), int(minute)
        
        if 0 <= hour <= 23 and 0 <= minute <= 59:
            return ("time", f"{hour:02d}:{minute:02d}")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ —á–∞—Å–æ–≤
    hour_match = re.match(r'^(\d{1,2})$', text)
    if hour_match:
        hour = int(hour_match.group(1))
        if 0 <= hour <= 23:
            return ("time", f"{hour:02d}:00")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
    date_patterns = [
        (r'^—Å–µ–≥–æ–¥–Ω—è$', datetime.now().strftime('%Y-%m-%d')),
        (r'^–∑–∞–≤—Ç—Ä–∞$', (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')),
        (r'^–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞$', (datetime.now() + timedelta(days=2)).strftime('%Y-%m-%d')),
    ]
    
    for pattern, fixed_date in date_patterns:
        if re.match(pattern, text):
            return ("date", fixed_date)
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –î–î.–ú–ú –∏ –î–î.–ú–ú.–ì–ì–ì–ì
    date_match1 = re.match(r'^(\d{1,2})\.(\d{1,2})$', text)
    if date_match1:
        day, month = map(int, date_match1.groups())
        year = datetime.now().year
        try:
            parsed_date = datetime(year, month, day)
            if parsed_date <= datetime.now():
                parsed_date = parsed_date.replace(year=year + 1)
            return ("date", parsed_date.strftime('%Y-%m-%d'))
        except ValueError:
            pass
    
    date_match2 = re.match(r'^(\d{1,2})\.(\d{1,2})\.(\d{4})$', text)
    if date_match2:
        day, month, year = map(int, date_match2.groups())
        try:
            parsed_date = datetime(year, month, day)
            return ("date", parsed_date.strftime('%Y-%m-%d'))
        except ValueError:
            pass
    
    return None

def similarity(a: str, b: str) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ –æ—Ç 0 –¥–æ 1"""
    return SequenceMatcher(None, a.lower(), b.lower()).ratio()

def find_similar_events(db: Session, user_id: int, query: str, threshold: float = 0.3) -> List[Event]:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
    events = db.query(Event).filter(
        Event.user_id == user_id,
        Event.scheduled_at > datetime.now()
    ).all()
    
    similar_events = []
    query_words = set(query.lower().split())
    
    for event in events:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
        full_similarity = similarity(query, event.description)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        event_words = set(event.description.lower().split())
        word_intersection = len(query_words.intersection(event_words))
        word_similarity = word_intersection / max(len(query_words), len(event_words)) if query_words or event_words else 0
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –∫–∞–∫ –º–∞–∫—Å–∏–º—É–º –∏–∑ –¥–≤—É—Ö –º–µ—Ç—Ä–∏–∫
        final_similarity = max(full_similarity, word_similarity)
        
        if final_similarity >= threshold:
            similar_events.append(event)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–∂–µ—Å—Ç–∏
    return sorted(similar_events, key=lambda e: e.scheduled_at)

def validate_and_parse_json(json_str: str) -> Union[Dict[str, Any], None]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON —Å—Ç—Ä–æ–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        json_str = json_str.strip()
        if json_str.startswith('```json'):
            json_str = json_str[7:]
        if json_str.endswith('```'):
            json_str = json_str[:-3]
        json_str = json_str.strip()
        
        parsed_json = json.loads(json_str)
        
        # –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        valid_commands = [
            'create', 'delete', 'change_time', 'change_date', 
            'change_description', 'change_full', 'list'
        ]
        
        if parsed_json.get('command') not in valid_commands:
            logger.error(f"Invalid command: {parsed_json.get('command')}")
            return None
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        command = parsed_json.get('command')
        
        if command in ['create']:
            if not parsed_json.get('event'):
                return None
        elif command in ['delete', 'change_time', 'change_date', 'change_description', 'change_full']:
            if not parsed_json.get('event'):
                return None
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è datetime –ø–æ–ª–µ–π
        for field in ['datetime', 'new_datetime']:
            if field in parsed_json and parsed_json[field]:
                try:
                    dt = datetime.fromisoformat(parsed_json[field])
                    
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ
                    if dt <= datetime.now():
                        if dt.year < datetime.now().year:
                            dt = dt.replace(year=datetime.now().year)
                            if dt <= datetime.now():
                                dt = dt.replace(year=datetime.now().year + 1)
                        else:
                            dt = dt + timedelta(days=1)
                        
                        parsed_json[field] = dt.isoformat()
                        logger.info(f"–í—Ä–µ–º—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ: {parsed_json[field]}")
                        
                except ValueError:
                    logger.error(f"Invalid datetime format: {parsed_json[field]}")
                    return None
        
        return parsed_json
        
    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error: {e}")
        return None
    except Exception as e:
        logger.error(f"JSON validation error: {e}")
        return None

def create_event_with_notification(
    db: Session,
    user_id: int,
    description: str,
    scheduled_at: datetime,
    notification_minutes: int
) -> Event:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    event = Event(
        user_id=user_id,
        description=description,
        scheduled_at=scheduled_at
    )
    db.add(event)
    db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è
    
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if notification_minutes > 0:
        notification = Notification(
            event_id=event.id,
            notification_minutes=notification_minutes
        )
        db.add(notification)
    
    db.commit()
    return event

def schedule_notifications():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    db = get_db()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = db.execute(text("""
            SELECT 
                n.id as notification_id,
                n.event_id,
                e.description,
                e.scheduled_at,
                n.notification_minutes,
                datetime(e.scheduled_at, '-' || n.notification_minutes || ' minutes') as notify_at,
                e.user_id
            FROM notifications n
            INNER JOIN events e ON n.event_id = e.id
            WHERE n.is_sent = 0
            AND datetime(e.scheduled_at, '-' || n.notification_minutes || ' minutes') > datetime('now')
        """)).fetchall()
        
        for notification in notifications:
            notify_at = datetime.fromisoformat(notification.notify_at)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            job_id = f"notification_{notification.notification_id}"
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                scheduler.remove_job(job_id)
            except:
                pass
            
            scheduler.add_job(
                send_notification,
                trigger=DateTrigger(run_date=notify_at),
                args=[notification.user_id, notification.event_id, notification.notification_id],
                id=job_id
            )
            
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    finally:
        db.close()

def create_notification_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    keyboard = []
    
    keyboard.append([
        InlineKeyboardButton(text="‚ö° 5 –º–∏–Ω", callback_data="notify_5min"),
        InlineKeyboardButton(text="‚è∞ 15 –º–∏–Ω", callback_data="notify_15min"),
        InlineKeyboardButton(text="‚è≤Ô∏è 30 –º–∏–Ω", callback_data="notify_30min")
    ])
    
    keyboard.append([
        InlineKeyboardButton(text="üïê 1 —á–∞—Å", callback_data="notify_1hour"),
        InlineKeyboardButton(text="üïë 2 —á–∞—Å–∞", callback_data="notify_2hour")
    ])
    
    keyboard.append([
        InlineKeyboardButton(text="üìÖ 1 –¥–µ–Ω—å", callback_data="notify_1day"),
        InlineKeyboardButton(text="üîï –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify_no_notification")
    ])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_event_selection_keyboard(events: List[Event], action: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è"""
    keyboard = []
    
    for event in events[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Å–æ–±—ã—Ç–∏–π
        time_str = event.scheduled_at.strftime("%d.%m %H:%M")
        display_event = event.description if len(event.description) <= 30 else event.description[:27] + "..."
        
        button_text = f"üìù {display_event}\nüìÖ {time_str}"
        callback_data = f"{action}_{event.id}"
        
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def send_notification(user_id: int, event_id: int, notification_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    db = get_db()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
        result = db.execute(text("""
            SELECT 
                e.description,
                e.scheduled_at,
                n.notification_minutes
            FROM events e
            INNER JOIN notifications n ON e.id = n.event_id
            WHERE e.id = :event_id AND n.id = :notification_id
        """), {"event_id": event_id, "notification_id": notification_id}).fetchone()
        
        if result:
            description, scheduled_at, notification_minutes = result
            scheduled_dt = datetime.fromisoformat(scheduled_at)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            time_str = scheduled_dt.strftime("%d.%m.%Y %H:%M")
            
            if notification_minutes >= 1440:
                days = notification_minutes // 1440
                time_left = f"—á–µ—Ä–µ–∑ {days} –¥–Ω."
            elif notification_minutes >= 60:
                hours = notification_minutes // 60
                time_left = f"—á–µ—Ä–µ–∑ {hours} —á."
            else:
                time_left = f"—á–µ—Ä–µ–∑ {notification_minutes} –º–∏–Ω."
            
            message_text = (
                f"üîî **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï!**\n\n"
                f"üìù **{description}**\n"
                f"‚è∞ {time_str} ({time_left})\n\n"
                f"üìå –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ!"
            )
            
            await bot.send_message(chat_id=user_id, text=message_text, parse_mode="Markdown")
            
            # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            db.execute(text(
                "UPDATE notifications SET is_sent = 1 WHERE id = :notification_id"
            ), {"notification_id": notification_id})
            db.commit()
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    finally:
        db.close()

# Callback handlers
@dp.callback_query(F.data.startswith("notify_"))
async def handle_notification_selection(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    assert callback.from_user is not None
    assert callback.message is not None
    
    user_id = callback.from_user.id
    notification_type = callback.data.split("_")[1]
    
    if user_id in pending_tasks:
        task_data = pending_tasks[user_id]
        notification_info = NOTIFICATION_OPTIONS.get(notification_type)
        
        if notification_info and "event" in task_data and "datetime" in task_data:
            await bot.send_chat_action(chat_id=callback.message.chat.id, action=ChatAction.TYPING)
            
            scheduled_at = datetime.fromisoformat(task_data["datetime"])
            
            db = get_db()
            try:
                event = create_event_with_notification(
                    db=db,
                    user_id=user_id,
                    description=task_data["event"],
                    scheduled_at=scheduled_at,
                    notification_minutes=notification_info["minutes"]
                )
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                schedule_notifications()
                
                time_str = scheduled_at.strftime("%d.%m.%Y %H:%M")
                
                success_text = (
                    f"‚úÖ **–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
                    f"üìù **–°–æ–±—ã—Ç–∏–µ:** {task_data['event']}\n"
                    f"‚è∞ **–í—Ä–µ–º—è:** {time_str}\n"
                    f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:** {notification_info['text']}\n\n"
                    f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                )
                
                await callback.message.edit_text(success_text, parse_mode="Markdown")
                del pending_tasks[user_id]
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                await callback.message.edit_text("‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è**", parse_mode="Markdown")
            finally:
                db.close()
        else:
            await callback.message.edit_text("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_"))
async def handle_delete_event(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    assert callback.from_user is not None
    assert callback.message is not None
    
    user_id = callback.from_user.id
    event_id = int(callback.data.split("_")[1])
    
    await bot.send_chat_action(chat_id=callback.message.chat.id, action=ChatAction.TYPING)
    
    db = get_db()
    try:
        event = db.query(Event).filter(Event.id == event_id, Event.user_id == user_id).first()
        
        if event:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            notifications = db.query(Notification).filter(Notification.event_id == event_id).all()
            for notification in notifications:
                job_id = f"notification_{notification.id}"
                try:
                    scheduler.remove_job(job_id)
                except:
                    pass
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ (cascade —É–¥–∞–ª–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
            db.delete(event)
            db.commit()
            
            time_str = event.scheduled_at.strftime("%d.%m.%Y %H:%M")
            success_text = (
                f"üóëÔ∏è **–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!**\n\n"
                f"üìù **–°–æ–±—ã—Ç–∏–µ:** {event.description}\n"
                f"‚è∞ **–ë—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:** {time_str}\n\n"
                f"‚úÖ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã"
            )
            
            await callback.message.edit_text(success_text, parse_mode="Markdown")
        else:
            await callback.message.edit_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await callback.message.edit_text("‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è**", parse_mode="Markdown")
    finally:
        db.close()
    
    await callback.answer()

@dp.callback_query(F.data == "cancel")
async def handle_cancel(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    assert callback.from_user is not None
    
    user_id = callback.from_user.id
    if user_id in pending_tasks:
        del pending_tasks[user_id]
    
    await callback.message.edit_text("‚ùå **–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞**", parse_mode="Markdown")
    await callback.answer()

# Command handlers
@dp.message(Command("start"))
async def start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    start_text = (
        "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Calendar AI Bot!**\n\n"
        "ü§ñ –Ø –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –ò–ò\n\n"
        "‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "üß† –ü–æ–Ω–∏–º–∞—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫\n"
        "üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
        "üîî –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "üìã **–ö–æ–º–∞–Ω–¥—ã:** /mytasks, /help\n\n"
        "üöÄ **–ü—Ä–∏–º–µ—Ä—ã:**\n"
        "‚Ä¢ *–°–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:30*\n"
        "‚Ä¢ *–£–¥–∞–ª–∏ –≤—Å—Ç—Ä–µ—á—É —Å –≤—Ä–∞—á–æ–º*\n"
        "‚Ä¢ *–ò–∑–º–µ–Ω–∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ 16:00*\n"
        "‚Ä¢ *–ü–µ—Ä–µ–Ω–µ—Å–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ 14:00*\n\n"
        "üí° **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ!**"
    )
    
    await message.answer(start_text, parse_mode="Markdown")

@dp.message(Command("help"))
async def help_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ **–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**\n\n"
        "üìù **–°–û–ó–î–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô:**\n"
        "‚Ä¢ *–°–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:30*\n"
        "‚Ä¢ *–ù–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ 18:00*\n"
        "‚Ä¢ *–ü–æ—Å—Ç–∞–≤—å –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞*\n\n"
        
        "üóëÔ∏è **–£–î–ê–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô:**\n"
        "‚Ä¢ *–£–¥–∞–ª–∏ –≤—Å—Ç—Ä–µ—á—É —Å –≤—Ä–∞—á–æ–º*\n"
        "‚Ä¢ *–£–±–µ—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –ø–æ–∫—É–ø–∫–∏*\n"
        "‚Ä¢ *–û—Ç–º–µ–Ω–∏ –∑–≤–æ–Ω–æ–∫*\n\n"
        
        "üìù **–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô:**\n"
        "‚Ä¢ *–ò–∑–º–µ–Ω–∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ 16:00*\n"
        "‚Ä¢ *–ü–µ—Ä–µ–Ω–µ—Å–∏ –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ 14:00*\n"
        "‚Ä¢ *–ü–µ—Ä–µ–∏–º–µ–Ω—É–π –≤—Å—Ç—Ä–µ—á—É –≤ —Å–æ–±—Ä–∞–Ω–∏–µ*\n\n"
        
        "‚å®Ô∏è **–†—É—á–Ω–æ–π –≤–≤–æ–¥:**\n"
        "üïê –í—Ä–µ–º—è: `15:30, 09, 20:45`\n"
        "üìÖ –î–∞—Ç—ã: `—Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, 25.12`\n\n"
        
        "üìã **–ö–æ–º–∞–Ω–¥—ã:** /mytasks, /help"
    )
    
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(Command("mytasks"))
async def show_tasks_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    assert message.from_user is not None
    user_id = message.from_user.id
    
    await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    
    db = get_db()
    try:
        events = db.query(Event).filter(
            Event.user_id == user_id,
            Event.scheduled_at > datetime.now()
        ).order_by(Event.scheduled_at).limit(10).all()
        
        if not events:
            await message.answer(
                "üìã **–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è**\n\n"
                "üì≠ *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π*\n\n"
                "üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:\n"
                "*–ù–∞–ø—Ä–∏–º–µ—Ä: \"–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:30\"*"
            , parse_mode="Markdown")
            return
        
        tasks_text = f"üìã **–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è ({len(events)}):**\n\n"
        
        for event in events:
            time_str = event.scheduled_at.strftime("%d.%m.%Y –≤ %H:%M")
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            desc_lower = event.description.lower()
            if any(word in desc_lower for word in ['–≤—Å—Ç—Ä–µ—á–∞', '—Å–æ–±—Ä–∞–Ω–∏–µ']):
                emoji = "ü§ù"
            elif any(word in desc_lower for word in ['–≤—Ä–∞—á', '–¥–æ–∫—Ç–æ—Ä']):
                emoji = "üë®‚Äç‚öïÔ∏è"  
            elif any(word in desc_lower for word in ['–ø–æ–∫—É–ø–∫–∏', '–º–∞–≥–∞–∑–∏–Ω']):
                emoji = "üõí"
            elif any(word in desc_lower for word in ['–∑–≤–æ–Ω–æ–∫', '–ø–æ–∑–≤–æ–Ω–∏—Ç—å']):
                emoji = "üìû"
            else:
                emoji = "üìù"
            
            tasks_text += f"{emoji} **{event.description}**\nüìÖ {time_str}\n\n"
        
        await message.answer(tasks_text, parse_mode="Markdown")
        
    finally:
        db.close()

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
@dp.message(F.text)
async def handle_event_text(message: Message) -> None:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ò–ò"""
    assert message.text is not None
    assert message.from_user is not None
    
    user_id = message.from_user.id
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –≤—Ä—É—á–Ω—É—é –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parsed_input = parse_time_input(message.text)
    
    if parsed_input and user_id in pending_tasks:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏/–¥–∞—Ç—ã –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        input_type, input_value = parsed_input
        task_data = pending_tasks[user_id]
        
        if input_type == "time" and "need_time" in task_data:
            task_data["time"] = input_value
            if "date" in task_data:
                task_data["datetime"] = f"{task_data['date']}T{input_value}"
                del task_data["need_time"]
                
                await message.answer(
                    f"‚è∞ **–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–æ!**\n\n"
                    f"üìù **–°–æ–±—ã—Ç–∏–µ:** {task_data['event']}\n"
                    f"üìÖ **–î–∞—Ç–∞:** {task_data['date']}\n"
                    f"‚è∞ **–í—Ä–µ–º—è:** {input_value}\n\n"
                    f"üîî **–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:**",
                    reply_markup=create_notification_keyboard()
                )
            else:
                await message.answer(
                    f"‚è∞ **–í—Ä–µ–º—è {input_value} –ø—Ä–∏–Ω—è—Ç–æ!**\n\n"
                    f"üìÖ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É:\n"
                    f"*–ü—Ä–∏–º–µ—Ä—ã: —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, 25.12*"
                )
            return
            
        elif input_type == "date" and "need_date" in task_data:
            task_data["date"] = input_value
            if "time" in task_data:
                task_data["datetime"] = f"{input_value}T{task_data['time']}"
                del task_data["need_date"]
                
                await message.answer(
                    f"üìÖ **–î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!**\n\n"
                    f"üìù **–°–æ–±—ã—Ç–∏–µ:** {task_data['event']}\n"
                    f"üìÖ **–î–∞—Ç–∞:** {input_value}\n"
                    f"‚è∞ **–í—Ä–µ–º—è:** {task_data['time']}\n\n"
                    f"üîî **–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:**",
                    reply_markup=create_notification_keyboard()
                )
            else:
                await message.answer(
                    f"üìÖ **–î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!**\n\n"
                    f"‚è∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è:\n"
                    f"*–ü—Ä–∏–º–µ—Ä—ã: 15:30, 09, 20:45*"
                )
            return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    
    try:
        json_response = parse_message_with_ai(message.text)
        logger.info(f"Gigachat JSON response: {json_response}")
        
        parsed_data = validate_and_parse_json(json_response)
        
        if not parsed_data:
            await message.answer(
                "‚ùå **–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É**\n\n"
                "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                "‚Ä¢ *–°–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:30*\n"
                "‚Ä¢ *–£–¥–∞–ª–∏ –≤—Å—Ç—Ä–µ—á—É —Å –≤—Ä–∞—á–æ–º*\n"
                "‚Ä¢ *–ò–∑–º–µ–Ω–∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ 16:00*\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            )
            return
        
        command = parsed_data['command']
        event_query = parsed_data.get('event', '')
        
        db = get_db()
        try:
            if command == "create":
                if not parsed_data.get('datetime'):
                    # –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è
                    pending_tasks[user_id] = {
                        "event": event_query,
                        "need_time": True,
                        "need_date": True
                    }
                    await message.answer(
                        f"üìù **–°–æ–±—ã—Ç–∏–µ:** {event_query}\n\n"
                        f"‚è∞ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:\n"
                        f"*–ü—Ä–∏–º–µ—Ä—ã: –∑–∞–≤—Ç—Ä–∞ 15:30, —Å–µ–≥–æ–¥–Ω—è 14:00*"
                    )
                    return
                
                # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                pending_tasks[user_id] = {
                    "event": event_query,
                    "datetime": parsed_data['datetime']
                }
                
                dt = datetime.fromisoformat(parsed_data['datetime'])
                time_str = dt.strftime("%d.%m.%Y %H:%M")
                
                await message.answer(
                    f"‚úÖ **–°–æ–±—ã—Ç–∏–µ –ø–æ–Ω—è—Ç–æ!**\n\n"
                    f"üìù **–°–æ–±—ã—Ç–∏–µ:** {event_query}\n"
                    f"‚è∞ **–í—Ä–µ–º—è:** {time_str}\n\n"
                    f"üîî **–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:**",
                    reply_markup=create_notification_keyboard()
                )
            
            elif command == "delete":
                # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–±—ã—Ç–∏–π
                similar_events = find_similar_events(db, user_id, event_query)
                
                if not similar_events:
                    await message.answer(
                        f"üîç **–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π**\n\n"
                        f"‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: *{event_query}*\n\n"
                        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mytasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π"
                    )
                elif len(similar_events) == 1:
                    # –£–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
                    event_obj = similar_events[0]
                    
                    # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                    notifications = db.query(Notification).filter(Notification.event_id == event_obj.id).all()
                    for notification in notifications:
                        try:
                            scheduler.remove_job(f"notification_{notification.id}")
                        except:
                            pass
                    
                    db.delete(event_obj)
                    db.commit()
                    
                    time_str = event_obj.scheduled_at.strftime("%d.%m.%Y %H:%M")
                    await message.answer(
                        f"üóëÔ∏è **–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!**\n\n"
                        f"üìù **–°–æ–±—ã—Ç–∏–µ:** {event_obj.description}\n"
                        f"‚è∞ **–ë—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:** {time_str}\n\n"
                        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã"
                    )
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
                    await message.answer(
                        f"üîç **–ù–∞–π–¥–µ–Ω–æ {len(similar_events)} —Å–æ–±—ã—Ç–∏–π**\n\n"
                        f"üëá **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–µ —É–¥–∞–ª–∏—Ç—å:**",
                        reply_markup=create_event_selection_keyboard(similar_events, "delete")
                    )
            
            elif command in ["change_time", "change_date", "change_full"]:
                # –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
                similar_events = find_similar_events(db, user_id, event_query)
                
                if not similar_events:
                    await message.answer(
                        f"üîç **–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π**\n\n"
                        f"‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: *{event_query}*\n\n"
                        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mytasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π"
                    )
                elif len(similar_events) == 1 and parsed_data.get('new_datetime'):
                    # –ò–∑–º–µ–Ω—è–µ–º –≤—Ä–µ–º—è —Å—Ä–∞–∑—É
                    event_obj = similar_events[0]
                    new_dt = datetime.fromisoformat(parsed_data['new_datetime'])
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    notifications = db.query(Notification).filter(Notification.event_id == event_obj.id).all()
                    for notification in notifications:
                        try:
                            scheduler.remove_job(f"notification_{notification.id}")
                        except:
                            pass
                    
                    event_obj.scheduled_at = new_dt
                    db.commit()
                    
                    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    schedule_notifications()
                    
                    time_str = new_dt.strftime("%d.%m.%Y %H:%M")
                    await message.answer(
                        f"‚úÖ **–°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!**\n\n"
                        f"üìù **–°–æ–±—ã—Ç–∏–µ:** {event_obj.description}\n"
                        f"‚è∞ **–ù–æ–≤–æ–µ –≤—Ä–µ–º—è:** {time_str}\n\n"
                        f"üîÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
                    )
                else:
                    await message.answer(
                        f"üîß **–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n"
                        f"üí° –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        f"*–ò–∑–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ 15:30*"
                    )
            
            elif command == "change_description":
                similar_events = find_similar_events(db, user_id, event_query)
                
                if not similar_events:
                    await message.answer(f"‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: *{event_query}*")
                elif len(similar_events) == 1 and parsed_data.get('new_event'):
                    event_obj = similar_events[0]
                    old_desc = event_obj.description
                    event_obj.description = parsed_data['new_event']
                    db.commit()
                    
                    await message.answer(
                        f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!**\n\n"
                        f"üìù **–ë—ã–ª–æ:** {old_desc}\n"
                        f"üìù **–°—Ç–∞–ª–æ:** {event_obj.description}\n"
                        f"‚è∞ **–í—Ä–µ–º—è:** {event_obj.scheduled_at.strftime('%d.%m.%Y %H:%M')}"
                    )
                else:
                    await message.answer("üîß **–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**")
            
            elif command == "list":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è (–∫–∞–∫ /mytasks)
                await show_tasks_handler(message)
                return
                
        finally:
            db.close()
        
        logger.info(f"Successfully processed command: {command}")
        
    except Exception as e:
        logger.error(f"Error in handle_event_text: {e}")
        await message.answer(
            "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
        )

async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    init_db()
    logger.info("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Gigachat
    token = get_gigachat_token()
    if token:
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Gigachat —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Gigachat")
    
    scheduler.start()
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    schedule_notifications()
    
    try:
        logger.info("üöÄ Calendar AI Bot –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    finally:
        scheduler.shutdown()
        logger.info("üîö –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())